//ЗАДАЧИ НА 1 СЕМЕСТР
/*
Задача 1 (+)
В функцию подаются координаты двух точек (x,y), через которые
проходит прямая y = kx + b. Вывести уравнение прямой.
Примечание: если две точки совпадают, вывести 0.
Сигнатура: std::string line(float x1, float y1, floar x2, float y2);
Example 1:
input: 1 5 2 7
output: y = 2x + 3
*/

std::string line(float x1, float y1, float x2, float y2);
TEST_CASE( "line") {
    SECTION("standart cases")
    {
        REQUIRE(std::string(line(1,5,2,7)) == std::string("y = 2x + 3")));
        REQUIRE(std::string(line(0,0,4,4)) == std::string("y = x")));
        REQUIRE(std::string(line(-2,3,0,5)) == std::string("y = x + 5")));
        REQUIRE(std::string(line(1,2,2,2)) == std::string("y = 2")));
        REQUIRE(std::string(line(1,2,1,3)) == std::string("x = 1")));
        REQUIRE(std::string(line(1,1,1,1)) == std::string("0")));
    }
}


/*
Задача 3. (+)
В функцию подается натуральное число. Вывести произведение его нечетных цифр.
Сигнатура: int multiplyOdd(int n);
Примечание: если нечетных нет, вывести 0.
Example 1:
input: 456789
output: 315
Example 2:
input: 123
output: 3
*/

int multiplyOdd(int n);
TEST_CASE("the product of odd digits") {
    REQUIRE( multiplyOdd(1) == 1 );
    REQUIRE( multiplyOdd(456789) == 315 );
    REQUIRE( multiplyOdd(123) == 3 );
    REQUIRE( multiplyOdd(0) == 0 );
    REQUIRE( multiplyOdd(246) == 0 );
}


/*
Задача 4. (+)
В функцию подаются три целых неотрицательных числа. Определить, может ли существовать треугольник с такими
сторонами, и если да, то какой он? 
Вывод: 0 - не существует, 1 - разносторонний, 2 - равнобедренный, 3 - равносторонний, 4 - прямоугольный
Сигнатура: int triangle(int a, int b, int c);
Example 1:
input: 3 4 5
output: 4
Example 2:
input: 2 4 10
output: 0
*/

int triangle(int a, int b, int c);
TEST_CASE("type of triangle") {
    REQUIRE( triangle(3,4,5) == 4 );
    REQUIRE( triangle(2,4,10) == 0 );
    REQUIRE( triangle(2,2,1) == 2 );
    REQUIRE( triangle(0,0,0) == 0 );
    REQUIRE( triangle(3,3,3) == 3 );
    REQUIRE( triangle(2,3,4) == 1 );
}


/*
Задача 5. (+)
Напишите функции по вычислению факториала и нахождению n-ого элемента ряда Фибоначчи. 
n - целое неотрицательное число.
Сигнатура: 
int Factorial(int number) 
int Fibonacci(int number)
Example 1: Факториал
input: 3
output: 6
Example 1: Фибоначчи
input: 3
output: 2
*/

#define CATCH_CONFIG_MAIN
#include "catch2\catch.hpp"

int Factorial(int number);
int Fibonacci(int number);
TEST_CASE( "Factorials are computed") {
    REQUIRE( Factorial(0) == 1 );
    REQUIRE( Factorial(1) == 1 );
    REQUIRE( Factorial(2) == 2 );
    REQUIRE( Factorial(3) == 6 );
    REQUIRE( Factorial(10) == 3628800 );
}

TEST_CASE( "Fibonacci are computed") {
    REQUIRE( Fibonacci(1) == 1 );
    REQUIRE( Fibonacci(2) == 1 );
    REQUIRE( Fibonacci(3) == 2 );
    REQUIRE( Fibonacci(10) == 55 );
    REQUIRE( Fibonacci(20) == 6765 );
}


/*
Задача 6. (+) дописать еще тестов (спросить про nullptr)
Напишите функцию, которая считает сумму нечетных элементов массива.
В функцию подается массив целых чисел и количество элементов в массиве.
Сигнатура: int sumOdd(int mus[], int number);
Example 1:
input: 1 2 3 4 5 6
output: 9
Example 2:
input: 0 1 -1 5 6
output: 5
*/

int sumOdd(int* array, int number);
TEST_CASE( "Sum odd" )
{
    int m[6] = {-1, 0, 1, -2, -4, 5};
    REQUIRE(sumOdd(m, 6) == 5);

    int mus[1] = {1};
    REQUIRE(sumOdd(mus, 1) == 1);

    int array[1] = {2};
    REQUIRE(sumOdd(array, 1) == 0);
}

/*
Задача 7. (я пока нинаю как получше передать матрицы)
Напишите функцию, которая считает произведение двух матриц.
Примечание: размер первой матрицы - M x N, второй - N x M.
Сигнатура: int** mulMatrix(int** matr_f, int** matr_s, int m, int n);
Example:
Input: 
matr_f
1 4
2 0 
2 3

matr_s
0 1 2
0 4 3

N = 2 
M = 3

output: 
16 7
16 9
*/

int** mulMatrix(int** matr_f, int** matr_s, int m, int n);
TEST_CASE( "Mul matrix" )
{
    int mf[3][3];
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            mf[i][j] = i + j;
        }
    }
    int ms[3][3] = {
        {2, 4, 6},
        {7, 3, 5},
        {3, 8, 12}
    };

    int mrt[3][3] = {
        {13, 19, 29},
        {37, 49, 75},
        {61, 79, 121}
    };
    int** mr = mulMatrix((int**)mf, (int**)ms, 3, 3);
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            REQUIRE(mrt[i][j] == mr[i][j]);
        }
    }
}



/*
Задача 8. (аналогично 7)
Написать функцию, которая считает определитель матрицы 3х3. 
Сигнатура: int detMatrix(int** matr);
Example:
input:  
1 2 0
4 3 -1
-2 0 4
output: -16
*/

int detMatrix(int** matr);
TEST_CASE( "Det matrix" ) 
{   
    SECTION("ex1") 
    { 
        int m[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                m[i][j] = i + j;
            }
        }
        REQUIRE(detMatrix((int**)m)  == 0);
    }

    SECTION("Ex2") 
    {
        int m[3][3] = {
            {2, 4, 6},
            {7, 3, 5},
            {3, 8, 12}
        };
        REQUIRE(detMatrix((int**)m)  == -2);
    }

}

/*
Задача 9.
Напишите функцию, которая из строки, состоящую из разных символов, берет цифры и переходит
их в соответствующее число. 
Сигнатура: int strToInt(char* str);
Example:
input: "1jdj-5kd%7"
output: 157
*/

int strToInt(char* str);
TEST_CASE( "Past Mult" ) 
{    
    REQUIRE(std::string(pastMult(60))  == std::string("2*2*3*5"));
    REQUIRE(std::string(pastMult(1))  == std::string("1"));
    REQUIRE(std::string(pastMult(17))  == std::string("17"));
}





/*
Задача 10.
Напишите функцию, которая натуральное число n раскладывает в произведение простых множителей.
Множители выводятся в порядке неубывания через знак *.
Сигнатура: char* pastMult(int n);
Example:
input: 60
output: 2*2*3*5
*/

char* pastMult(int n);
TEST_CASE( "Past Mult" ) 
{    
    REQUIRE(std::string(pastMult(60))  == std::string("2*2*3*5"));
    REQUIRE(std::string(pastMult(1))  == std::string("1"));
    REQUIRE(std::string(pastMult(17))  == std::string("17"));
}


Задача 11. (а какой формат будет у восьмеричного числа? Мб сделать строкой?)
Дано натуральное число n. Перевести его в восьмеричную систему счисления.

Задача 12. (снова не хочу)
Пользователь вводит строку. Перевести ее в верхний регистр и вывести. 

Задача 13. (убираем)
Вводится пятизначное число. Необходимо вывести отдельно каждую цифру в новой строке.

Задача 14. 
Пользователь вводит натуральное число n - количество слагаемых и целое число k - степень.
Найти алгебраическую сумму для выражения: 1^k + 2^k + 3^k + … + N^k.

Задача 15.
Вводится натуральное число. Найти наибольшую и наименьшую цифру в числе.

Задача 16.
Вводятся 3 рациональных числа x,y,z - координаты вектора. Найти его длину. Ответ округлить до сотых. 

Задача 17.
Вводятся координаты точки. Определить, в какой четверти она расположена. 

Задача 18.
Пользователь вводит нечетное число n >= 3, затем вводится число, где  1 - *,2 -  +, 3 - #.
Составить программу, которая будет печатать ромб выбранным значком. 
Выбор значков организовать оператором switch.

Задача 19.
Программа принимает пятизначное число. Определить, является ли введенное число палиндромом.
Если да - вывести 1, если нет - 0.

Задача 20.
Найти след квадратной матрицы. Размер матрицы NxN вводит пользователь, матрицу заполнять случайными числами.

Задача 21.
Используя оператор цикла do while, составить программу, которая будет требовать ввод цифр
с клавиатуры до тех пор, пока не будет введен 0. Вывести сумму введенных цифр. 

Задача 22.
Даны два уравнения линий: y = ax^2 + bx + c и y = dx + k. Пользователь вводит числа a, b, c, d, k.
Вывести координаты (x,y) точки/точек пересечения. Если линии не пересекаются, вывести 0. 

Задача 23.
В текстовом файле input.txt хранится строка, содержащая открывающиеся и закрывающиеся фигурные скобки.
Проверить баланс скобок (для каждой открывающейся скобки есть своя закрывающася).
В случае выполнения баланса вывести на экран 1, в случае невыполнения - 0 и записать в файл output.txt 

Задача 24.
Задача на динамическое выделение памяти. Изначально есть указатель на массив с одним элементом.
Пользователь вводит число. Если оно больше 0 записываем его в массив. Далее пользователь вводит второе число.
Если оно больше 0, надо перевыделить память для 2-х элементов массива и записать в массив второе число. 
И так далее…  для 3-х элементов, для 4-х…  пока пользователь не введет отрицательное число. 
Вывести сумму введенных элементов и размер массива.  

Задача 25.
Пользователь вводит числа a и b. Сгенерировать случайные числа в интервале [a;b] и заполнить
ими двумерный массив размером 6 на 6. В массиве необходимо найти максимальный и минимальный элемент. 
Заменить числа на главной диагонали на максимальный элемент, а числа на побочной - на минимальный. 
На место пересечения - сумму максимального и минимального. Вывести на экран. 

Задача 26.
В первой строчке пользователь вводит строку. Во второй строке - множество символов. 
Посчитать количество повторений множества в строке.  

Задача 27.
В первой строчке пользователь вводит число n - размер массива. На следующей строчке вводятся элементы массива. 
Вывести все нечетные элементы массива.

Задача 28.
Пользователь вводит строку. Найти наибольшее количество идущих подряд букв.

Задача 29.
Пользователь вводит строку символов. Признак конца строки — символ '\n' (переход на новую строку). 
Строка состоит из слов, которые отделены друг от друга пробелами. Вывести самое длинное слово и его порядковый номер.

Задача 30.
Дан файл, в котором записан некоторый текст на английском языке. Требуется вывести в алфавитном
порядке все буквы, которые встречаются в файле и их количество.

Задача 31.
Пользователь вводит через запятую целые числа, которыми будет заполнен массив.
Напишите функцию, которая принимает массив с разными числами, а возвращает максимальное
произведение двух чисел из этого массива. Вывести результат.

Задача 31.
Пользователь вводит строку. Напишите функцию, которая принимает строку, а возвращает ее
перевернутый вариант (слова в обратном порядке). Напечатать полученную строку на экране. 

Задача 32.
На вход подается число N. Вывести на экран треугольник из символов ’*’ из N линий.

Задача 33.
Пользователь вводит числа, которыми будет заполнен массив. 
Реализовать функцию сортировки массива. Вывести на экран отсортированный массив. 

Задача 34.
На вход подается одномерный массив целых чисел. Необходимо отсортировать массив (можно методом пузырька)
и вывести его на экран. В отсортированном массиве найти медиану (отметка, делящая ранжированные данные, 
либо число по середине ранжированного списка либо среднее арифметическое из двух по середине), моду 
(наиболее часто встречающееся значение в данных), среднее, максимум, минимум, размах (разность между наибольшим и наименьшим).

Задача 35.
Даны значения двух моментов времени, принадлежащих одним и тем же суткам: часы, минуты и секунды для каждого
из моментов времени. Известно, что второй момент времени наступил не раньше первого. Определите, сколько секунд
прошло между двумя моментами времени.

Задача 36.
Определите наименьшее расстояние между двумя локальными максимумами последовательности натуральных чисел,
завершающейся числом 0. Если в последовательности нет двух локальных максимумов, выведите число 0.

Задача 37.
Даны действительные коэффициенты a, b, c. Решите уравнение ax2 + bx + c = 0 и выведите все его корни.
Если данное уравнение не имеет корней, выведите число 0. Если уравнение имеет один корень, 
выведите число 1, а затем этот корень. Если уравнение имеет два корня, выведите число 2, а затем два корня
в порядке возрастания. Если уравнение имеет бесконечно много корней, выведите число 3.

Задача 38.
Дан массив. Выведите те его элементы, которые встречаются в массиве только один раз. 
Элементы нужно выводить в том порядке, в котором они встречаются в списке.

